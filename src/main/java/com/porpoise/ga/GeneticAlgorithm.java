package com.porpoise.ga;public class GeneticAlgorithm {    private final IChlorine chlorine;    public GeneticAlgorithm(final Probability probability) {        this(new ChlorineImpl(probability));    }    public GeneticAlgorithm(final float crossRate, final float mutationRate) {        this(new Probability(crossRate, mutationRate));    }    public GeneticAlgorithm() {        this(Probability.getInstance());    }    public GeneticAlgorithm(final IChlorine transform) {        chlorine = transform;    }    public Result solve(final IGenePool original) {        return solve(original, Integer.MAX_VALUE);    }    public Result solve(final IGenePool original, final int maxGenerations) {        //        // our pool of available variations is available via the genePool        //        int generation = 0;        IGenePool pool = original;        while (!pool.hasSolution() && generation < maxGenerations) {            generation++;            pool = chlorine.evolve(pool);        }        if (!pool.hasSolution()) {            return null;        }        return new Result(generation, pool);    }}