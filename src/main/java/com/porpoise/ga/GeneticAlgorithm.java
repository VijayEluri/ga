package com.porpoise.ga;public class GeneticAlgorithm<T extends Comparable<T>> {    private final IChlorine chlorine;    public GeneticAlgorithm(final IGeneEvaluation<T> criteria, final float crossRate, final float mutationRate) {        this(new ChlorineImpl<T>(criteria, new Probability(crossRate, mutationRate)));    }    public GeneticAlgorithm(final IGeneEvaluation<T> criteria) {        this(new ChlorineImpl<T>(criteria));    }    public GeneticAlgorithm(final IChlorine transform) {        chlorine = transform;    }    public Result solve(final IGenePool original) {        //        // our pool of available variations is available via the genePool        //        int generation = 0;        IGenePool pool = original;        System.out.println(Probability.getInstance());        while (!pool.hasSolution()) {            generation++;            System.out.println("before:");            System.out.println(pool);            pool = chlorine.evolve(pool);            System.err.println("after:");            System.err.println(pool);        }        return new Result(generation, pool);    }}