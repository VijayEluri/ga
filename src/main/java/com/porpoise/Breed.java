package com.porpoise;import java.util.List;import java.util.Random;public class Breed {    private final IGenome         genome;    private final IGeneEvaluation judge;    private final Random          rand = new Random();    private final Mutations       mutations;    private final float           crossProbability;    public Breed(final IGenome gen, final IGeneEvaluation evalFunction) {        this(gen, evalFunction, 0.0015F, 0.7F);    }    public Breed(final IGenome gen, final IGeneEvaluation evalFunction, final float mutation, final float cross) {        genome = gen;        if (genome == null) {            throw new NullPointerException("null genome");        }        if (cross < 0 || cross > 1.0) {            throw new NullPointerException("cross probability must be between 0 and 1.0");        }        judge = evalFunction;        mutations = new Mutations(mutation);        crossProbability = cross;    }    public Result solve() {        //        // our pool of available variations is available via the genome        //        int generation = 0;        while (true) {            while (genome.hasNext()) {                final IMutator m = mutations.next();                final boolean cross = rand.nextFloat() < crossProbability;                final List<IGene<?>> sequence = genome.nextSequence(m, cross);                generation++;                final float result = judge.score(sequence);                if (result >= 1.0) {                    return new Result(generation);                }            }        }    }}